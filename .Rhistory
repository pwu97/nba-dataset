geom_hline(aes(yintercept = 1.96/sqrt(length(trips_per_day$n_trips))),
lty = "dashed", col = "blue") +
geom_hline(aes(yintercept = -1.96/sqrt(length(trips_per_day$n_trips))),
lty = "dashed", col = "blue") +
peterwu_315_theme +
labs(title = "Series trips_per_day$n_trips",
x = "Lag",
y = "ACF")
acf(trips_per_day$n_trips)
generate_ggplot <- function(time_series) {
acf_out <- acf(time_series, plot = FALSE)
acf_df <- data.frame(lag = as.vector(acf_out$lag), acf = as.vector(acf_out$acf))
res <- ggplot(data = acf_df, aes(x = lag, y = acf)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(aes(xend = lag, yend = 0)) +
geom_hline(aes(yintercept = 1.96/sqrt(length(time_series))), lty = "dashed", col = "blue") +
geom_hline(aes(yintercept = -1.96/sqrt(length(time_series))), lty = "dashed", col = "blue") +
peterwu_315_theme +
labs(title = "Series rand_ts",
x = "Lag",
y = "ACF")
return(res)
}
generate_ggplot(rand_ts)
acf(rand_ts)
acf(rand_ts)
generate_ggplot(rand_ts)
acf(trips_per_day$n_trips)
generate_ggplot(trips_per_day$n_trips)
res <- ggplot(data = acf_df, aes(x = lag, y = acf)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(aes(xend = lag, yend = 0)) +
geom_hline(aes(yintercept = 1.96/sqrt(length(time_series))), lty = "dashed", col = "blue") +
geom_hline(aes(yintercept = -1.96/sqrt(length(time_series))), lty = "dashed", col = "blue") +
peterwu_315_theme
generate_ggplot <- function(time_series) {
acf_out <- acf(time_series, plot = FALSE)
acf_df <- data.frame(lag = as.vector(acf_out$lag), acf = as.vector(acf_out$acf))
res <- ggplot(data = acf_df, aes(x = lag, y = acf)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(aes(xend = lag, yend = 0)) +
geom_hline(aes(yintercept = 1.96/sqrt(length(time_series))), lty = "dashed", col = "blue") +
geom_hline(aes(yintercept = -1.96/sqrt(length(time_series))), lty = "dashed", col = "blue") +
peterwu_315_theme
return(res)
}
acf(rand_ts)
generate_ggplot(rand_ts)
generate_ggplot(rand_ts) +
labs(title = "Series rand_ts")
generate_ggplot(trips_per_day$n_trips) +
labs(title = "Series trips_per_day$n_trips")
generate_ggplot <- function(time_series) {
acf_out <- acf(time_series, plot = FALSE)
acf_df <- data.frame(lag = as.vector(acf_out$lag), acf = as.vector(acf_out$acf))
res <- ggplot(data = acf_df, aes(x = lag, y = acf)) +
geom_hline(aes(yintercept = 0)) +
geom_segment(aes(xend = lag, yend = 0)) +
geom_hline(aes(yintercept = 1.96/sqrt(length(time_series))), lty = "dashed", col = "blue") +
geom_hline(aes(yintercept = -1.96/sqrt(length(time_series))), lty = "dashed", col = "blue") +
peterwu_315_theme
return(res)
}
acf(rand_ts)
generate_ggplot(rand_ts) +
labs(title = "Series rand_ts",
x = "Lag",
y = "ACF")
bike_moving_average_14 <- get_moving_averages(trips_per_day$n_trips, 14)
bike_moving_average_14
bike_moving_average_14[1:20]
bike_moving_average_14[1:13]
bike_moving_average_14 <- trips_per_day$bike_moving_average_14
bike_moving_average_14
bike_moving_average_14 <- get_moving_averages(trips_per_day$n_trips, 14)
bike_moving_average_14 <- trips_per_day$bike_moving_average_14
trips_per_day
bike_moving_average_14
bike_moving_average_14 <- get_moving_averages(trips_per_day$n_trips, 14)
bike_moving_average_14
trips_per_day$bike_moving_average_14 <- bike_moving_average_14
trips_per_day
#  Summarize the big_bike, creating a new data.frame that includes the number
#  of trips taken on each day
trips_per_day <- big_bike %>%
group_by(start_date) %>%
summarize(n_trips = n())
bike_moving_average_14 <- get_moving_averages(trips_per_day$n_trips, 14)
trips_per_day$bike_moving_average_14 <- bike_moving_average_14
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line() +
scale_x_date() +
geom_point() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
library(tidyverse)
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line() +
scale_x_date() +
geom_point() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line() +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) +
geom_line(x = bike_moving_average_14) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
bike_moving_average_14
bike_moving_average_14 <- get_moving_averages(trips_per_day$n_trips, 14) %>% replace_na(100)
bike_moving_average_14
trips_per_day$bike_moving_average_14 <- bike_moving_average_14
trips_per_day
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) +
geom_line(x = bike_moving_average_14) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
bike_moving_average_14 <- get_moving_averages(trips_per_day$n_trips, 14)
bike_moving_average_14[1:13]
bike_moving_average_14[1:20]
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) +
geom_line(x = bike_moving_average_14) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line() +
scale_x_date() +
geom_point() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme, y = n_trips)) +
geom_line(x = bike_moving_average_14) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) +
geom_line(y = bike_moving_average_14) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) +
geom_line() +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) +
geom_line(aes(y = n_trips)) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14)) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
get_moving_averages <- function(time_series, ww) {
#  Throw an error if the window width is too big
if (ww > length(time_series))
stop("Window width is greater than length of time series")
#  Your code here!
res <- c()
for (i in 1:length(time_series)) {
res <- c(res, moving_average(i, time_series, ww))
}
return(res)
}
bike_moving_average_14 <- get_moving_averages(trips_per_day$n_trips, 14)
bike_moving_average_14
bike_moving_average_14[1:13]
bike_moving_average_14[1:20]
bike_moving_average_14 <- get_moving_averages(trips_per_day$n_trips, 14)
bike_moving_average_14[1:13]
bike_moving_average_14[1:20]
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14)) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14), color = "blue") +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14), color = "dodgerblue") +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
bike_moving_average_14
trips_per_day$bike_moving_average_14 <- bike_moving_average_14
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14), color = "dodgerblue") +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
trips_per_day$bike_moving_average_14 <- bike_moving_average_14
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14), color = "dodgerblue") +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14), color = "dodgerblue", lty = 2) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14), color = "dodgerblue", lty = 3) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14), color = "dodgerblue", lty = 5) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14), color = "dodgerblue", lwd = 2) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14), color = "dodgerblue", lwd = 1) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
#  tt:  The point at which
#  weights:  the weights to be used in the moving average
#  Note:  length(weights) should always equal ww!
weighted_moving_average <- function(tt, time_series, ww, weights = NULL) {
#  Throw an error if the window width is too big
if (ww > length(time_series))
stop("Window width is greater than length of time series")
#  If weights are not specified, use standard weights
if (is.null(weights))  weights <- rep(1/ww, ww)
#  Throw an error if the window width is too big
if (length(weights) != ww)
stop("Weights should have the same length as the window width")
#  If the window width is greater than the time point, return NA
if (tt < ww)  return(NA)
#  Standardize the weights so they sum to 1
weights <- weights / sum(weights)
#  Your code here!
sum <- 0
for (i in 1:length(weights)) {
sum <- sum + weights[i] * time_series[tt-ww+i]
}
return(sum/ww)
}
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
#  weights:  the weights to be used in the moving average
#  Note:  length(weights) should always equal ww!
get_weighted_moving_averages <- function(time_series, ww, weights) {
#  Throw an error if the window width is too big
if (ww > length(time_series))  stop("Window width is greater than length of time series")
#  If weights are not specified, use standard weights
if (is.null(weights))  weights <- rep(1/ww, ww)
#  Throw an error if the window width is too big
if (length(weights) != ww)
stop("Weights should have the same length as the window width")
#  Standardize the weights so they sum to 1
weights <- weights / sum(weights)
#  Your code here!
res <- c()
for (i in 1:length(time_series)) {
res <- c(res, weighted_moving_average(i, time_series, ww))
}
return(res)
}
get_weighted_moving_averages(trips_per_day$n_trips, 7, weights)
weights
weights = c(1,1,1,1,1,3,5)
get_weighted_moving_averages(trips_per_day$n_trips, 7, weights)
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = bike_moving_average_14), color = "dodgerblue", lwd = 1) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
weights = c(1,1,1,1,1,3,5)
w7 <- get_weighted_moving_averages(trips_per_day$n_trips, 7, weights)
trips_per_day$w7 <- w7
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = w7), color = "dodgerblue", lwd = 1) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = w7), color = "red", lwd = 1) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = w7), color = "red", linetype = "dashed") +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
#  tt:  The point at which
#  weights:  the weights to be used in the moving average
#  Note:  length(weights) should always equal ww!
weighted_moving_average <- function(tt, time_series, ww, weights = NULL) {
#  Throw an error if the window width is too big
if (ww > length(time_series))
stop("Window width is greater than length of time series")
#  If weights are not specified, use standard weights
if (is.null(weights))  weights <- rep(1/ww, ww)
#  Throw an error if the window width is too big
if (length(weights) != ww)
stop("Weights should have the same length as the window width")
#  If the window width is greater than the time point, return NA
if (tt < ww)  return(NA)
#  Standardize the weights so they sum to 1
weights <- weights / sum(weights)
#  Your code here!
res <- 0
for (i in 1:length(weights)) {
res <- res + weights[i] * time_series[tt-ww+i]
}
return(res)
}
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
#  weights:  the weights to be used in the moving average
#  Note:  length(weights) should always equal ww!
get_weighted_moving_averages <- function(time_series, ww, weights) {
#  Throw an error if the window width is too big
if (ww > length(time_series))  stop("Window width is greater than length of time series")
#  If weights are not specified, use standard weights
if (is.null(weights))  weights <- rep(1/ww, ww)
#  Throw an error if the window width is too big
if (length(weights) != ww)
stop("Weights should have the same length as the window width")
#  Standardize the weights so they sum to 1
weights <- weights / sum(weights)
#  Your code here!
res <- c()
for (i in 1:length(time_series)) {
res <- c(res, weighted_moving_average(i, time_series, ww))
}
return(res)
}
weights = c(1,1,1,1,1,3,5)
w7 <- get_weighted_moving_averages(trips_per_day$n_trips, 7, weights)
trips_per_day$w7 <- w7
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = w7), color = "red", linetype = "dashed") +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y = w7), color = "red", linetype = "dashed", lwd = 1) +
scale_x_date() +
labs(x = "Start Date",
y = "Number of Trips",
title = "Number of Trips for each Start Date") +
peterwu_315_theme
library(shiny); runApp('Downloads/interactive-project-group22-1-4.r')
install.packages("visNetwork")
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
runApp('Downloads/interactive-project-group22-1-4.r')
library(shiny); runApp('Downloads/interactive-project-group22-final.R')
runApp('Downloads/interactive-project-group22-final.R')
